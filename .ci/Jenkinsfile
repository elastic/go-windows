#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO = "go-windows"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
    GO111MODULE = 'on'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i)(.*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*|^\\/test$)')
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Test') {
      failFast false
      matrix {
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'GO_VERSION'
            values '1.12'
          }
          axis {
            name 'PLATFORM'
            values 'ubuntu-18 && immutable', 'windows-2019 && immutable'
          }
        }
        stages {
          stage('Test') {
            agent { label "${PLATFORM}" }
            steps {
              withGithubNotify(context: "Test-${GO_VERSION}-${PLATFORM}") {
                withGoEnv(version: "${GO_VERSION}"){
                  deleteDir()
                  unstash 'source'
                  dir("${BASE_DIR}"){
                    whenTrue(isUnix()) {
                      sh(label: "go test for ${GO_VERSION} in ${PLATFORM}", script: '.ci/scripts/test.sh')
                    }
                    whenFalse(isUnix()) {
                      retryWithSleep(retries: 2, seconds: 5, backoff: true){
                        bat(label: "Install Go/Mage ${GO_VERSION}", script: ".ci/scripts/install-tools.bat")
                      }
                      bat(label: "go test for ${GO_VERSION} in ${PLATFORM}", script: '.ci/scripts/test.bat')
                    }
                  }
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/*.xml")
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def withGoEnvMultiplatform(Map args = [:], Closure body) {
  if(isUnix()) {
    withGoEnv(version: "${args.version}"){
      body()
    }
  } else {
    def mingwArch = is32() ? '32' : '64'
    def goArch = is32() ? '386' : 'amd64'
    def chocoPath = 'C:\\ProgramData\\chocolatey\\bin'
    def userProfile="${env.WORKSPACE}"
    def goRoot = "${userProfile}\\.gvm\\versions\\go${args.version}.windows.${goArch}"
    def path = "${env.WORKSPACE}\\bin;${goRoot}\\bin;${chocoPath};C:\\tools\\mingw${mingwArch}\\bin;${env.PATH}"
    withEnv([
      "GOPATH=${env.WORKSPACE}",
      "GOROOT=${goRoot}",
      "HOME=${env.WORKSPACE}",
      "PATH=${path}",
      "USERPROFILE=${userProfile}"
    ]) {
      body()
    }
  }
}
